name: build-latest

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  analyze:
    name: code analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java-kotlin
            build-mode: none
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  build:
    runs-on: ubuntu-latest
    needs: analyze
    steps:

      - name: Checkout code.
        uses: actions/checkout@v4

      - name: Set up JDK 21.
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages.
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download and unzip lgndware.
        run: |
          curl -L -o lgndware-1.0.0.jar -H "Authorization: token ${{ secrets.LGNDWARE_ACCESS_TOKEN }}" \
          https://github.com/lgndluke/lgndware/releases/download/lgndware-1.0.0-Dev/lgndware-1.0.0.jar
          curl -L -o lgndware-source.zip -H "Authorization: token ${{ secrets.LGNDWARE_ACCESS_TOKEN }}" \
          https://github.com/lgndluke/lgndware/archive/refs/tags/lgndware-1.0.0-Dev.zip
          unzip lgndware-lgndware-1.0.0-Dev.zip
          mv lgndware-1.0.0.jar lgndware-lgndware-1.0.0-Dev
          cd lgndware-lgndware-1.0.0-Dev

      - name: Install dependencies and build project.
        run: |
          mvn install:install-file -Dfile=lgndware-1.0.0.jar -DgroupId=com.lgndluke -DartifactId=lgndware -Dversion=1.0.0 -Dpackaging=jar -DpomFile=pom.xml
          mvn install
          mvn -B package --file pom.xml

      - name: Create release directory and move .jar into it.
        run: |
          mkdir -p release
          mv target/AreaResetterPro*.jar release/

      - name: Upload .jar file as an artifact.
        uses: actions/upload-artifact@v4
        with:
          name: AreaResetterPro-latest
          path: release/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout code.
        uses: actions/checkout@v4

      - name: Download .jar artifact.
        uses: actions/download-artifact@v4
        with:
          name: AreaResetterPro-latest
          path: release

      - name: Get .jar file name
        id: get_jar_name
        run: |
          JAR_PATH=$(ls release/*.jar)
          JAR_NAME=$(basename $JAR_PATH)
          JAR_BASENAME=${JAR_NAME%.jar}
          echo "JAR_PATH=${JAR_PATH}" >> $GITHUB_ENV
          echo "JAR_NAME=${JAR_NAME}" >> $GITHUB_ENV
          echo "JAR_BASENAME=${JAR_BASENAME}" >> $GITHUB_ENV

      - name: Create release.
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ env.JAR_BASENAME }}-v${{ GITHUB.RUN_NUMBER }}
          release_name: ${{ env.JAR_BASENAME }}-v${{ GITHUB.RUN_NUMBER }}
          draft: false
          prerelease: false

      - name: Upload .jar to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.JAR_PATH }}
          asset_name: ${{ env.JAR_NAME }}
          asset_content_type: application/java-archive
