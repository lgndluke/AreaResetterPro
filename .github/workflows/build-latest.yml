name: build-latest

on:
  push:
    branches:
      - master

jobs:
  analyze:
    name: code analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java-kotlin
            build-mode: none
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  build:
    runs-on: ubuntu-latest
    needs: analyze
    steps:

      - name: Checkout code.
        uses: actions/checkout@v4

      - name: Set up JDK 21.
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages.
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom-1-20.xml', '**/pom-1-21.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download, unzip, install dependencies and build project for 1.20.
        run: |
          wget https://github.com/lgndluke/lgndware/releases/download/lgndware-1.0.0-PAPER/lgndware-1.0.0-PAPER-1.20.jar
          wget https://github.com/lgndluke/lgndware/archive/refs/tags/lgndware-1.0.0-PAPER.tar.gz
          tar -xzvf lgndware-1.0.0-PAPER.tar.gz
          mv lgndware-1.0.0-PAPER-1.20.jar lgndware-lgndware-1.0.0-PAPER
          cd lgndware-lgndware-1.0.0-PAPER
          mvn install:install-file -Dfile=lgndware-1.0.0-PAPER-1.20.jar -DgroupId=com.lgndluke -DartifactId=lgndware -Dversion=1.0.0-PAPER-1.20 -Dpackaging=jar -DpomFile=pom-1-20.xml
          cd ..
          mvn install
          mvn -B package --file pom-1-20.xml

      - name: Create release directory and move AreaResetterPro-1.3.4-PAPER-1.20.jar into it.
        run: |
          mkdir -p release
          mv target/*-1.20.jar release/

      - name: Upload 1.20.jar as an artifact.
        uses: actions/upload-artifact@v4
        with:
          name: AreaResetterPro-1.3.4-PAPER-1.20
          path: release/*.jar

      - name: Download, install dependencies and build project for 1.21.
        run: |
          wget https://github.com/lgndluke/lgndware/releases/download/lgndware-1.0.0-PAPER/lgndware-1.0.0-PAPER-1.21.jar
          mv lgndware-1.0.0-PAPER-1.21.jar lgndware-lgndware-1.0.0-PAPER
          cd lgndware-lgndware-1.0.0-PAPER
          mvn install:install-file -Dfile=lgndware-1.0.0-PAPER-1.21.jar -DgroupId=com.lgndluke -DartifactId=lgndware -Dversion=1.0.0-PAPER-1.21 -Dpackaging=jar -DpomFile=pom-1-21.xml
          cd ..
          mvn install
          mvn -B package --file pom-1-21.xml

      - name: Move AreaResetterPro-1.3.4-PAPER-1.21.jar into release directory.
        run: mv target/*-1.21.jar release/

      - name: Upload .jar file as an artifact.
        uses: actions/upload-artifact@v4
        with:
          name: AreaResetterPro-1.3.4-PAPER-1.21
          path: release/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout code.
        uses: actions/checkout@v4

      - name: Download 1.20.jar artifact.
        uses: actions/download-artifact@v4
        with:
          name: AreaResetterPro-1.3.4-PAPER-1.20
          path: release

      - name: Download 1.21.jar artifact.
        uses: actions/download-artifact@v4
        with:
          name: AreaResetterPro-1.3.4-PAPER-1.21
          path: release

      - name: Get 1.20 .jar file name
        id: get_jar_name_1_20
        run: |
          JAR_PATH=$(ls release/AreaResetterPro-1.3.4-PAPER-1.20.jar)
          JAR_NAME=$(basename $JAR_PATH)
          JAR_BASENAME=${JAR_NAME%.jar}
          echo "JAR_PATH=${JAR_PATH}" >> $GITHUB_ENV
          echo "JAR_NAME=${JAR_NAME}" >> $GITHUB_ENV
          echo "JAR_BASENAME=${JAR_BASENAME}" >> $GITHUB_ENV

      - name: Create release.
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ env.JAR_BASENAME }}
          release_name: ${{ env.JAR_BASENAME }}
          draft: false
          prerelease: false

      - name: Upload 1.20 .jar to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.JAR_PATH }}
          asset_name: ${{ env.JAR_NAME }}
          asset_content_type: application/java-archive

      - name: Get 1.21.jar file name
        id: get_jar_name_1_21
        run: |
          JAR_PATH=$(ls release/AreaResetterPro-1.3.4-PAPER-1.21.jar)
          JAR_NAME=$(basename $JAR_PATH)
          JAR_BASENAME=${JAR_NAME%.jar}
          echo "JAR_PATH=${JAR_PATH}" >> $GITHUB_ENV
          echo "JAR_NAME=${JAR_NAME}" >> $GITHUB_ENV
          echo "JAR_BASENAME=${JAR_BASENAME}" >> $GITHUB_ENV

      - name: Upload 1.21 .jar to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.JAR_PATH }}
          asset_name: ${{ env.JAR_NAME }}
          asset_content_type: application/java-archive